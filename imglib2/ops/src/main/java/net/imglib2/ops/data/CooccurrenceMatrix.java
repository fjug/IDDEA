/*
 * #%L
 * ImgLib2: a general-purpose, multidimensional image processing library.
 * %%
 * Copyright (C) 2009 - 2013 Stephan Preibisch, Tobias Pietzsch, Barry DeZonia,
 * Stephan Saalfeld, Albert Cardona, Curtis Rueden, Christian Dietz, Jean-Yves
 * Tinevez, Johannes Schindelin, Lee Kamentsky, Larry Lindsey, Grant Harris,
 * Mark Hiner, Aivar Grislis, Martin Horn, Nick Perry, Michael Zinsmaier,
 * Steffen Jaensch, Jan Funke, Mark Longair, and Dimiter Prodanov.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of any organization.
 * #L%
 */

package net.imglib2.ops.data;

import java.util.Arrays;

import net.imglib2.ops.operation.iterableinterval.unary.MakeCooccurrenceMatrix;
import net.imglib2.ops.operation.iterableinterval.unary.MakeCooccurrenceMatrix.HaralickFeature;

/**
 * This Helper Class holds a co-occurrence matrix. It should be generated by
 * {@link MakeCooccurrenceMatrix}. It's features are ordered according to
 * {@link HaralickFeature}
 * 
 * @author Stephan Sellien, University of Konstanz
 */
public class CooccurrenceMatrix
{

	public static enum MatrixOrientation
	{
		DIAGONAL( 1, -1 ), ANTIDIAGONAL( 1, 1 ), HORIZONTAL( 1, 0 ), VERTICAL( 0, 1 );

		public final int dx;

		public final int dy;

		private MatrixOrientation( int dx, int dy )
		{
			this.dx = dx;
			this.dy = dy;
		}
	}

	// actual matrix
	private double[][] m_matrix = null;

	// feature vector
	private double[] m_haralickFeatures;

	/**
	 * Constructor creates co-occurrence matrix with given size (e.g. number of
	 * gray levels).
	 * 
	 * @param size
	 */
	public CooccurrenceMatrix( int size )
	{
		m_matrix = new double[ size ][ size ];
	}

	/**
	 * Returns the value at row, col of the co-occurrence matrix.
	 * 
	 * @param row
	 *            - the row
	 * @param col
	 *            - the column
	 * @return value at that position
	 */
	public final double getValueAt( final int row, final int col )
	{
		return m_matrix[ row ][ col ];
	}

	/**
	 * Increases matrix cell by one.
	 * 
	 * @param row
	 *            row
	 * @param col
	 *            col
	 */
	public final void incValueAt( final int row, final int col )
	{
		m_matrix[ row ][ col ]++;
	}

	/**
	 * Divides each entry of the matrix by divisor.
	 * 
	 * @param divisor
	 *            the divisor
	 */
	public final void divideBy( int divisor )
	{
		for ( int row = 0; row < m_matrix.length; row++ )
		{
			for ( int col = 0; col < m_matrix[ row ].length; col++ )
			{
				m_matrix[ row ][ col ] /= divisor;
			}
		}
	}

	/**
	 * Clears the matrix by filling with zeros.
	 */
	public void clear()
	{
		for ( int row = 0; row < m_matrix.length; row++ )
		{
			Arrays.fill( m_matrix[ row ], 0 );
		}
	}

	/**
	 * Sets the feature array. Must be according to {@link HaralickFeature}.
	 * 
	 * @param h
	 *            the feature vector
	 */
	public void setFeatures( double[] h )
	{
		m_haralickFeatures = h;
	}

	/**
	 * Returns the feature with given index. Returns NaN if no features are set
	 * or on invalid index.
	 * 
	 * @param id
	 *            the feature index
	 * @return the value
	 */
	public double getFeature( int id )
	{
		if ( m_haralickFeatures == null || id < 0 || id >= m_haralickFeatures.length )
			return Double.NaN;
		return m_haralickFeatures[ id ];
	}

}
